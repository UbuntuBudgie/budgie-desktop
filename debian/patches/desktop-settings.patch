Author: David Mohammed <fossfreedom@ubuntu.com>
Last-Update: 2019-10-16
Description: [PATCH 1/2] Add support to handle desktop icons for Nemo and
 DesktopFolder The compile option with-desktop-icons is removed; its replaced
 with a panel key to allow distros to choose their desktop-handler via an
 override or for users to manually update the key value from a choice of
 values.
 Origin: https://github.com/solus-project/budgie-desktop/pull/1839

---
 meson.build                                   |  6 --
 meson_options.txt                             |  1 -
 ...com.solus-project.budgie-panel.gschema.xml | 14 +++
 src/panel/meson.build                         | 10 +--
 src/panel/settings/settings_desktop.vala      | 90 +++++++++++++------
 src/panel/settings/settings_main.vala         | 27 ++++--
 6 files changed, 99 insertions(+), 49 deletions(-)

--- a/meson.build
+++ b/meson.build
@@ -100,11 +100,6 @@
 cdata.set_quoted('LOCALEDIR', localedir)
 cdata.set_quoted('PACKAGE_URL', 'https://budgie-desktop.org')
 
-with_desktop_icons = get_option('with-desktop-icons')
-if with_desktop_icons ==  'nautilus'
-    warning('You must have Nautilus 3.26 or older for desktop icons with Budgie')
-endif
-
 with_stateless = get_option('with-stateless')
 if with_stateless == true
     warning('Only use stateless option with a supported OS like Solus')
@@ -168,7 +163,6 @@
     '    ==============',
     '',
     '    gtk-doc:                                @0@'.format(with_gtk_doc),
-    '    desktop icons:                          @0@'.format(with_desktop_icons),
     '    stateless:                              @0@'.format(with_stateless),
 ]
 
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -2,4 +2,3 @@
 option('with-polkit', type: 'boolean', value: true, description: 'Enable PolKit support')
 option('with-bluetooth', type: 'boolean', value: true, description: 'Enable gnome-bluetooth support')
 option('with-gtk-doc', type: 'boolean', value: true, description: 'Build gtk-doc documentation')
-option('with-desktop-icons', type: 'combo', choices: ['nautilus', 'none'], value: 'nautilus', description: 'Desktop icon handling')
--- a/src/panel/com.solus-project.budgie-panel.gschema.xml
+++ b/src/panel/com.solus-project.budgie-panel.gschema.xml
@@ -33,6 +33,13 @@
       <value nick="BUDGIE_NOTIFICATION_POSITION_BOTTOM_RIGHT" value="4" />
   </enum>
 
+  <enum id="com.solus-project.budgie-panel.DesktopIconsHandler">
+      <value nick="NONE" value="1" />
+      <value nick="NAUTILUS" value="2" />
+      <value nick="NEMO" value="3" />
+      <value nick="DESKTOPFOLDER" value="4" />
+  </enum>
+
   <schema id="com.solus-project.budgie-panel.panel">
     <key enum="com.solus-project.budgie-panel.Position" name="location">
       <default>'none'</default>
@@ -159,6 +166,13 @@
       <description>Set the location on the screen where notification popups will appear.</description>
     </key>
 
+    <key enum="com.solus-project.budgie-panel.DesktopIconsHandler" name="desktop-icons-handler">
+      <default>'NONE'</default>
+      <summary>Application that handles desktop-icons</summary>
+      <description>Define which application handles desktop-icons. Note.
+       NAUTILUS only applies to v3.26 and should not be used for later versions of nautilus.</description>
+    </key>
+
     <key type="i" name="migration-level">
       <default>0</default>
       <summary>Current migration level</summary>
--- a/src/panel/meson.build
+++ b/src/panel/meson.build
@@ -36,6 +36,7 @@
     'settings/settings_style.vala',
     'settings/settings_wm.vala',
     'settings/themes.vala',
+    'settings/settings_desktop.vala',
     panel_resources,
 ]
 
@@ -72,10 +73,6 @@
         '--gresources=' + gresource,
 ]
 
-if with_desktop_icons == 'nautilus'
-    budgie_panel_vala_args += ['-D', 'HAVE_NAUTILUS']
-endif
-
 budgie_panel_c_args = [
     '-DWNCK_I_KNOW_THIS_IS_UNSTABLE'
 ]
--- a/src/panel/settings/settings_desktop.vala
+++ b/src/panel/settings/settings_desktop.vala
@@ -1,8 +1,8 @@
 /*
  * This file is part of budgie-desktop
- * 
+ *
  * Copyright Â© 2015-2019 Budgie Desktop Developers
- * 
+ *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
@@ -11,118 +11,151 @@
 
 namespace Budgie {
 
-/**
- * DesktopPage allows users to change aspects of the fonts used
- */
-public class DesktopPage : Budgie.SettingsPage {
-
-    private Settings wm_pref_settings;
-    private Gtk.SpinButton? workspace_count;
-
-#if HAVE_NAUTILUS
-    private Settings bg_settings;
-    private Settings nautilus_settings;
-    private Gtk.Switch switch_icons;
-    private Gtk.Switch switch_home;
-    private Gtk.Switch switch_network;
-    private Gtk.Switch switch_trash;
-    private Gtk.Switch switch_mounts;
-#endif
-
-    public DesktopPage()
-    {
-        Object(group: SETTINGS_GROUP_APPEARANCE,
-               content_id: "desktop",
-               title: _("Desktop"),
-               display_weight: 1,
-               icon_name: "preferences-desktop-wallpaper");
-
-        var grid = new SettingsGrid();
-        this.add(grid);
-
-        wm_pref_settings = new Settings("org.gnome.desktop.wm.preferences"); // Set up our wm preferences Settings
-
-#if HAVE_NAUTILUS
-        /* Allow icons */
-        switch_icons = new Gtk.Switch();
-        grid.add_row(new SettingsRow(switch_icons,
-            _("Desktop Icons"),
-            _("Control whether to allow launchers and icons on the desktop.")));
-
-        /* Hook up settings */
-        bg_settings = new GLib.Settings("org.gnome.desktop.background");
-        bg_settings.bind("show-desktop-icons", switch_icons, "active", SettingsBindFlags.DEFAULT);
-        bg_settings.changed["show-desktop-icons"].connect(this.update_switches);
-
-        /* Show home */
-        switch_home = new Gtk.Switch();
-        grid.add_row(new SettingsRow(switch_home,
-            _("Home directory"),
-            _("Add a shortcut to your home directory on the desktop.")));
-
-        /* Show network */
-        switch_network = new Gtk.Switch();
-        grid.add_row(new SettingsRow(switch_network,
-            _("Network servers"),
-            _("Add a shortcut to your local network servers on the desktop.")));
-
-        /* Show trash */
-        switch_trash = new Gtk.Switch();
-        grid.add_row(new SettingsRow(switch_trash,
-            _("Trash"),
-            _("Add a shortcut to the Trash directory on the desktop.")));
-
-        /* Show volumes */
-        switch_mounts = new Gtk.Switch();
-        grid.add_row(new SettingsRow(switch_mounts,
-            _("Mounted volumes"),
-            _("Mounted volumes & drives will appear on the desktop.")));
-
-
-        nautilus_settings = new GLib.Settings("org.gnome.nautilus.desktop");
-        nautilus_settings.bind("home-icon-visible", switch_home, "active", SettingsBindFlags.DEFAULT);
-        nautilus_settings.bind("network-icon-visible", switch_network, "active", SettingsBindFlags.DEFAULT);
-        nautilus_settings.bind("trash-icon-visible", switch_trash, "active", SettingsBindFlags.DEFAULT);
-        nautilus_settings.bind("volumes-visible", switch_mounts, "active", SettingsBindFlags.DEFAULT);
-
-        update_switches();
-#endif
-
-        workspace_count = new Gtk.SpinButton.with_range(1, 8, 1); // Create our button, with a minimum of 1 workspace and max of 8
-        workspace_count.set_value((double) wm_pref_settings.get_int("num-workspaces")); // Set our default value
-
-        workspace_count.value_changed.connect(() => { // On value change
-            int new_val = workspace_count.get_value_as_int(); // Get the value as an int
-
-            if (new_val < 1) { // Ensure valid minimum
-                new_val = 1;
-                workspace_count.set_value(1.0); // Set as 1
-            } else if (new_val > 8) { // Ensure valid maximum
-                new_val = 8;
-                workspace_count.set_value(8.0); // Set as 8
-            }
-
-            wm_pref_settings.set_int("num-workspaces", new_val); // Update num-workspaces
-        });
-
-        grid.add_row(new SettingsRow(workspace_count,
-            _("Number of virtual desktops"),
-            _("Number of virtual desktops / workspaces to create automatically on startup.")
-        ));
+    public class DesktopPage: Budgie.SettingsPage {
+        private Settings wm_pref_settings;
+        private Gtk.SpinButton? workspace_count;
+        protected Gtk.Switch switch_icons;
+        protected SettingsGrid grid;
+
+        public DesktopPage()
+        {
+            Object(group: SETTINGS_GROUP_APPEARANCE,
+                   content_id: "desktop",
+                   title: _("Desktop"),
+                   display_weight: 1,
+                   icon_name: "preferences-desktop-wallpaper");
+
+            grid = new SettingsGrid();
+            this.add(grid);
+
+            wm_pref_settings = new Settings("org.gnome.desktop.wm.preferences"); // Set up our wm preferences Settings
+
+            workspace_count = new Gtk.SpinButton.with_range(1, 8, 1); // Create our button, with a minimum of 1 workspace and max of 8
+            workspace_count.set_value((double) wm_pref_settings.get_int("num-workspaces")); // Set our default value
+
+            workspace_count.value_changed.connect(() => { // On value change
+                int new_val = workspace_count.get_value_as_int(); // Get the value as an int
+
+                if (new_val < 1) { // Ensure valid minimum
+                    new_val = 1;
+                    workspace_count.set_value(1.0); // Set as 1
+                } else if (new_val > 8) { // Ensure valid maximum
+                    new_val = 8;
+                    workspace_count.set_value(8.0); // Set as 8
+                }
+
+                wm_pref_settings.set_int("num-workspaces", new_val); // Update num-workspaces
+            });
+
+            grid.add_row(new SettingsRow(workspace_count,
+                _("Number of virtual desktops"),
+                _("Number of virtual desktops / workspaces to create automatically on startup.")
+            ));
+
+            /* Allow icons */
+            switch_icons = new Gtk.Switch();
+            grid.add_row(new SettingsRow(switch_icons,
+                _("Desktop Icons"),
+                _("Control whether to allow launchers and icons on the desktop.")));
+            
+        }
     }
 
-#if HAVE_NAUTILUS
-    void update_switches()
-    {
-
-        bool b = bg_settings.get_boolean("show-desktop-icons");
-        switch_home.sensitive = b;
-        switch_network.sensitive = b;
-        switch_trash.sensitive = b;
-        switch_mounts.sensitive = b;
-    }
-#endif
-    
-} /* End class */
+    /**
+     * NautilusDesktopPage allows users to change aspects of the fonts used
+     * for the nautilus desktop
+     */
+    public class NautilusDesktopPage : DesktopPage {
+
+        protected GLib.Settings bg_settings;
+        protected GLib.Settings desktop_settings;
+
+        private Gtk.Switch switch_home;
+        private Gtk.Switch switch_network;
+        private Gtk.Switch switch_trash;
+        private Gtk.Switch switch_mounts;
+
+        protected virtual void bind_settings() {
+            bg_settings = new GLib.Settings("org.gnome.desktop.background");
+            desktop_settings = new GLib.Settings("org.gnome.nautilus.desktop");
+        }
+
+        public NautilusDesktopPage()
+        {
+            base();
+
+            bind_settings();
+            /* Hook up settings */
+            bg_settings.bind("show-desktop-icons", switch_icons, "active", SettingsBindFlags.DEFAULT);
+            bg_settings.changed["show-desktop-icons"].connect(this.update_switches);
+
+            /* Show home */
+            switch_home = new Gtk.Switch();
+            grid.add_row(new SettingsRow(switch_home,
+                _("Home directory"),
+                _("Add a shortcut to your home directory on the desktop.")));
+
+            /* Show network */
+            switch_network = new Gtk.Switch();
+            grid.add_row(new SettingsRow(switch_network,
+                _("Network servers"),
+                _("Add a shortcut to your local network servers on the desktop.")));
+
+            /* Show trash */
+            switch_trash = new Gtk.Switch();
+            grid.add_row(new SettingsRow(switch_trash,
+                _("Trash"),
+                _("Add a shortcut to the Trash directory on the desktop.")));
+
+            /* Show volumes */
+            switch_mounts = new Gtk.Switch();
+            grid.add_row(new SettingsRow(switch_mounts,
+                _("Mounted volumes"),
+                _("Mounted volumes & drives will appear on the desktop.")));
+
+            desktop_settings.bind("home-icon-visible", switch_home, "active", SettingsBindFlags.DEFAULT);
+            desktop_settings.bind("network-icon-visible", switch_network, "active", SettingsBindFlags.DEFAULT);
+            desktop_settings.bind("trash-icon-visible", switch_trash, "active", SettingsBindFlags.DEFAULT);
+            desktop_settings.bind("volumes-visible", switch_mounts, "active", SettingsBindFlags.DEFAULT);
+
+            update_switches();
+        }
+
+        void update_switches()
+        {
+            bool b = bg_settings.get_boolean("show-desktop-icons");
+            switch_home.sensitive = b;
+            switch_network.sensitive = b;
+            switch_trash.sensitive = b;
+            switch_mounts.sensitive = b;
+        }
+
+    } /* End class */
+
+    /**
+     * NemoDesktopPage allows users to change aspects of the fonts used
+     * for the nemo desktop
+     */
+    public class NemoDesktopPage : NautilusDesktopPage {
+        protected override void bind_settings() {
+            bg_settings = new GLib.Settings("org.nemo.desktop");
+            desktop_settings = new GLib.Settings("org.nemo.desktop");
+        }
+    } /* End class */
+
+    /**
+     * DFDesktopPage allows users to change to switch desktop-icons
+     * on/off for DesktopFolder
+     */
+    public class DFDesktopPage : DesktopPage {
+        public DFDesktopPage()
+        {
+            base();
+
+            /* Hook up settings */
+            var settings = new GLib.Settings("com.github.spheras.desktopfolder");
+            settings.bind("show-desktopfolder", switch_icons, "active", SettingsBindFlags.DEFAULT);
+        }
+    } /* End class */
 
 } /* End namespace */
--- a/src/panel/settings/settings_main.vala
+++ b/src/panel/settings/settings_main.vala
@@ -1,8 +1,8 @@
 /*
  * This file is part of budgie-desktop
- * 
+ *
  * Copyright Â© 2015-2019 Budgie Desktop Developers
- * 
+ *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
@@ -101,11 +101,26 @@
     {
         this.add_page(new Budgie.StylePage());
 
-#if HAVE_NAUTILUS
-        if (Environment.find_program_in_path("nautilus") != null) {
-            this.add_page(new Budgie.DesktopPage());
+        var panel_settings = new GLib.Settings("com.solus-project.budgie-panel");
+        var desktop_icons_source = panel_settings.get_string("desktop-icons-handler");
+
+        switch (desktop_icons_source) {
+            case "NAUTILUS":
+                if (Environment.find_program_in_path("nautilus") != null) {
+                    this.add_page(new Budgie.NautilusDesktopPage());
+                }
+                break;
+            case "NEMO":
+                if (Environment.find_program_in_path("nemo-desktop") != null) {
+                    this.add_page(new Budgie.NemoDesktopPage());
+                }
+                break;
+            case "DESKTOPFOLDER":
+                if (Environment.find_program_in_path("desktopfolder") != null) {
+                    this.add_page(new Budgie.DFDesktopPage());
+                }
+                break;
         }
-#endif
 
         this.add_page(new Budgie.FontPage());
         this.add_page(new Budgie.WindowsPage());
