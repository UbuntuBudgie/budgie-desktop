Description: Resolve losing keyboard shortcuts on login
 From upstream #1763 linked issue to mutter tracker, the maintainer their had
 concerns how budgie desktop was managing keyboard dbus calls to grabbing and
 ungrabbing shortcuts.
 This patch reworked this along the guidelines the maintainer requested.
 .
Author: David Mohammed <fossfreedom@ubuntu.com>
Forwarded: https://github.com/solus-project/budgie-desktop/pull/1907
Last-Update: 2019-11-05

--- a/src/wm/shim.vala
+++ b/src/wm/shim.vala
@@ -138,8 +138,7 @@
 public class ShellShim : GLib.Object
 {
 
-    HashTable<uint,string> grabs;
-    HashTable<string,uint> watches;
+    HashTable<string, uint?> grabs;
     unowned Meta.Display? display;
 
     private SessionHandler? handler = null;
@@ -150,8 +149,7 @@
     [DBus (visible = false)]
     public ShellShim(Budgie.BudgieWM? wm)
     {
-        grabs = new HashTable<uint,string>(direct_hash, direct_equal);
-        watches = new HashTable<string,uint>(str_hash, str_equal);
+        grabs = new HashTable<string, uint?> (str_hash, str_equal);
 
         display = wm.get_display();
         display.accelerator_activated.connect(on_accelerator_activated);
@@ -196,60 +194,58 @@
 #if HAVE_MUTTER_5
     private void on_accelerator_activated(uint action, Clutter.InputDevice dev, uint device_id)
 #else
-    private void on_accelerator_activated(uint action, uint device_id)
+    private void on_accelerator_activated(uint action, uint device_id, timestamp)
 #endif
     {
-        HashTable<string,Variant> params = new HashTable<string,Variant>(str_hash, str_equal);
-
-        params.insert("device-id", device_id);
-        params.insert("timestamp", new Variant.uint32(0));
-        params.insert("action-mode", new Variant.uint32(0));
-
-        this.accelerator_activated(action, params);
+        foreach (string accelerator in grabs.get_keys ()) {
+            if (grabs[accelerator] == action) {
+                var params = new GLib.HashTable<string, Variant> (null, null);
+                params.set ("device-id", new Variant.uint32 (device_id));
+#if HAV_MUTTER_5
+                params.set ("timestamp", new Variant.uint32 (timestamp));
+#else
+                params.set ("timestamp", new Variant.uint32 (0));
+#endif
+                this.accelerator_activated (action, params);
+            }
+        }
     }
 
-    void on_disappeared(DBusConnection conn, string name)
+    public uint grab_accelerator (string accelerator, Meta.KeyBindingFlags flags) throws DBusError, IOError
     {
-        unowned string val;
-        unowned uint key;
-
-        if (!watches.contains(name)) {
-            return;
-        }
+        uint? action = grabs[accelerator];
 
-        uint id = watches.lookup(name);
-        Bus.unwatch_name(id);
-
-        var iter = HashTableIter<uint,string>(grabs);
-        while (iter.next(out key, out val)) {
-            if (val != name) {
-                continue;
+        if (action == null) {
+            action = display.grab_accelerator (accelerator, flags);
+            if (action > 0) {
+                grabs[accelerator] = action;
             }
-            display.ungrab_accelerator(key);
-            grabs.remove(key);
         }
+
+        return action;
     }
 
-#if HAVE_GSD_332
-    private uint _grab(string sender, string seq, uint flag, Meta.KeyBindingFlags grab_flags)
+    public uint[] grab_accelerators (GsdAccel[] accelerators) throws DBusError, IOError
     {
-        var ret = display.grab_accelerator(seq, grab_flags);
-#else
-    private uint _grab(string sender, string seq, uint flag)
-    {
-        var ret = display.grab_accelerator(seq);
-#endif
+        uint[] actions = {};
 
-        if (ret == Meta.KeyBindingAction.NONE) {
-            return ret;
+        foreach (unowned GsdAccel? accelerator in accelerators) {
+            actions += grab_accelerator (accelerator.accelerator, accelerator.grab_flags);
         }
 
-        grabs.insert(ret, sender);
+        return actions;
+    }
 
-        if (!watches.contains(sender)) {
-            var id = Bus.watch_name(BusType.SESSION, sender, BusNameWatcherFlags.NONE,
-                null, on_disappeared);
-            watches.insert(sender, id);
+    public bool ungrab_accelerator (uint action) throws DBusError, IOError
+    {
+        bool ret = false;
+        var keys = grabs.get_keys();
+        foreach (unowned string accelerator in keys) {
+            if (grabs[accelerator] == action) {
+                ret = display.ungrab_accelerator (action);
+                grabs.remove (accelerator);
+                break;
+            }
         }
 
         return ret;
@@ -273,42 +269,19 @@
             on_bus_acquired, null, null);
     }
 
-#if HAVE_GSD_332
     public uint GrabAccelerator(BusName sender, string accelerator, uint flags, Meta.KeyBindingFlags grab_flags)
     {
-        return _grab(sender, accelerator, flags, grab_flags);
+        return grab_accelerator(accelerator, grab_flags);
     }
 
     public uint[] GrabAccelerators(BusName sender, GsdAccel[] accelerators)
     {
-        uint[] t = { };
-        foreach (var a in accelerators) {
-            t += _grab(sender, a.accelerator, a.flags, a.grab_flags);
-        }
-        return t;
-    }
-#else
-    public uint GrabAccelerator(BusName sender, string accelerator, uint flags)
-    {
-        return _grab(sender, accelerator, flags);
+        return grab_accelerators(accelerators);
     }
 
-    public uint[] GrabAccelerators(BusName sender, GsdAccel[] accelerators)
-    {
-        uint[] t = { };
-        foreach (var a in accelerators) {
-            t += _grab(sender, a.accelerator, a.flags);
-        }
-        return t;
-    }
-#endif
-    public bool ungrab_accelerator(BusName sender, uint action)
+    public bool UngrabAccelerator(BusName sender, uint action)
     {
-        if (display.ungrab_accelerator(action)) {
-            grabs.remove(action);
-            return true;
-        }
-        return false;
+        return ungrab_accelerator (action);
     }
 
     /**
